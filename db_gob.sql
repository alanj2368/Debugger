-- phpMyAdmin SQL Dump
-- version 4.0.10deb1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Oct 31, 2015 at 11:18 PM
-- Server version: 5.5.44-0ubuntu0.14.04.1
-- PHP Version: 5.5.9-1ubuntu4.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `db_gob`
--

-- --------------------------------------------------------

--
-- Table structure for table `answers`
--

CREATE TABLE IF NOT EXISTS `answers` (
  `teamid` varchar(7) NOT NULL,
  `questionid` varchar(2) NOT NULL,
  `stageid` varchar(2) NOT NULL,
  `ans` longtext NOT NULL,
  `time` int(11) NOT NULL,
  PRIMARY KEY (`teamid`,`questionid`,`stageid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `answers`
--

INSERT INTO `answers` (`teamid`, `questionid`, `stageid`, `ans`, `time`) VALUES
('DEB001', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\nstd::cin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB001', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 2; num <= no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB001', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB001', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB001', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB001', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nchar * names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nputs(x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB001', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\nusing namespace std;\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n\\";\ncout << secondNum << "\\n\\";\nwhile (secondNum < 100) {\nthirdNum = firstNum + secondNum;\ncout << thirdNum << "\\n\\";\nfirstNum = secondNum;\nsecondNum = thirdNum;\n}\nreturn 0;\n}\n', 0),
('DEB001', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB002', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB002', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB002', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nint main() {\nint p;\nstd::cin>>p;\nwhile (p--) {\nint n, m, k;\nint ans=0;\nstd::cin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\nstd::cout<<ans - 1<<"\\n";\nelse\nstd::cout<<"""0\\n""";\n}\nreturn 0;\n}\n', 0),
('DEB002', '2', '1b', '#include<iostream>\r\nusing namespace std;\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n,i;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB002', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? ++(sum) : (x)=='' '' ? 1 :0 )\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB002', '2', '3b', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\n#include <process>\r\nstruct Node {\r\n	int val;\r\n	Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = NULL;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		Node *temp = new Node;\r\n		temp->next=NULL;\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			exit(1);\r\n		}\r\n		temp->val=elem;\r\n		size++;\r\n		if(top==NULL)\r\n		top=temp;\r\n		\r\n		else\r\n		{\r\n		temp->next = top;\r\n		top = temp;\r\n		\r\n	} }\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (Node *i = top; i != NULL; i = i->next)\r\n			if (i->val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n		exit(1);\r\n		}\r\n		for (Node *i = top; i != NULL; i = i.next)\r\n			std::cout << i.val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove(10) << "\\n";\r\n	return 0;\r\n}', 0),
('DEB002', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nusing namespace std;\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB002', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB002', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\n#include <process>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			exit(1);\r\n		}\r\n		data[top++] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top < 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top - 1; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB002', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdNum = firstNum + secondNum;\ncout << thirdNum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdNum;\n}\nreturn 0;\n}\n', 0),
('DEB002', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB002', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions = 0,i;\r\n	for ( i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			std::cout << array[i] << "\\t";\r\n		std::cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	std::cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		std::cin >> array[i];\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		std::cout << array[j] << "\\t";\r\n	std::cout << "\\n";\r\n	std::cout << inversion << "\\n";\r\n	return 0;\r\n}', 0),
('DEB003', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\ncin >> n;\r\nfor (i = 0; i < n; i++) {\r\ncin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\ncout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB003', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 1; num <= no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB003', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nusing namespace std;\n#define long long int\nint main() {\nint p;\ncin>>p;\nwhile (p--) {\nlli n, m, k;\nint ans=0;\ncin>>n>>k>>m;\nwhile (n < m) {\nans++;\nn *= k;\n}\ncout<<ans<<"\\n";\n}\nreturn 0;\n}\n', 0),
('DEB003', '2', '1b', '#include<iostream>\r\nusing namespace std;\r\nint array[1000000];\r\nvoid swap(int *a, int *b);\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n;\r\ncin >> n;\r\nfor (int i = 0; i < n; i++) {\r\ncin>>array[i];\r\n}\r\nselectionsort(array, n);\r\nfor (int j = 0; j < n; j++)\r\ncout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB003', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==O ? O : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB003', '2', '3b', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\nstruct Node {\r\n	int val;\r\n	Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = NULL;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		Node *temp = new Node;\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			exit(1);\r\n		}\r\n		size++;\r\n		temp.next = top;\r\n		top = temp;\r\n		top.val = elem;\r\n	}\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (Node *i = top; i.next != NULL; i = i.next)\r\n			if (i.val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n			exit(1);\r\n		}\r\n		for (Node *i = top; i.next != NULL; i = i.next)\r\n			std::cout << i.val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove(10) << "\\n";\r\n	return 0;\r\n}', 0),
('DEB003', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned long len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned long len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB003', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char names[N][15] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB003', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			exit(1);\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top - 1; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB003', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\nusing namespace std;\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdNum = firstNum + secondNum;\ncout << thirdNum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdNum;\n}\nreturn 0;\n}\n', 56),
('DEB003', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile ((fibo[i - 1] + fibo[i - 2])< 1000){\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n\r\n', 0),
('DEB003', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nusing namespace std;\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions = 0,i;\r\n	for (i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			cout << array[i] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}', 0),
('DEB004', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array[], 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB004', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (int i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\nselectionSort(array[], n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB004', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return false;\r\n	return true;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if (((String[len1] > ''Z'') || (String[len1] < ''A'')) && ((String[len1] > ''z'') || (String[len1] < ''a''))){ \r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = false;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if (((sub[len2] > ''Z'')|| (sub[len2] < ''A'')) && ((sub[len2] > ''z'') || (sub[len2] < ''a''))) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = true;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB004', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdnum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdnum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 0),
('DEB005', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", array+i);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB005', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nif(number==1)\r\nreturn 0;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB005', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\nusing namespace std;\r\nint main() {\r\nint p;\r\nscanf("%d",&p);\r\nwhile (p--) {\r\nint n, m, k;\r\nint ans=0;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB005', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB005', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O\\"\r\n                \\"     O            \\"\r\n                \\"             O    \\"\r\n              \\"    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB005', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = NULL;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp.next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i.next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i.next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove(10));\r\n	return 0;\r\n}', 0),
('DEB005', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB005', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nchar *x;\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\n\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB005', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB005', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB005', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\ni++;\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\n\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB005', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int *a, int n) {\r\n	int inversions,i,j,k;\r\n	for (i = 1; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",array[i]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB006', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB006', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nif(number==2)\r\nreturn 1;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB006', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB006', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O\r\n                     O            \r\n                             O    \r\n                   O   O          ";\r\n\r\n#define Add(char x,int sum) ((x)=='' '' ? 0 : (x)==0 ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int j;\r\n  int i=0;\r\n  while(wingT[i]!=''\\0'')\r\n  j=Add( wingT[i++], sum )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB006', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB006', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", *x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB006', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB006', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB007', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB007', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB007', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB007', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 3),
('DEB007', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define true 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return true;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%s\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 7),
('DEB007', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100*sizeof(char));\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0);
INSERT INTO `answers` (`teamid`, `questionid`, `stageid`, `ans`, `time`) VALUES
('DEB007', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n\\", firstNum);\r\nprintf("%d\\n\\", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%u\\n\\", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB007', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB008', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element);\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high)/ 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array(i);\r\n}\r\nstd::cin >> element\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 134),
('DEB008', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nusing namespace std;\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned int i = 2; i < limit; i++){\r\nif (number % i == 0)\r\nreturn false;\r\nelse\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned int no_of_test = 100;\r\nfor (unsigned int num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB008', '2', '1b', '#include<iostream>\r\nusing namespace std;\r\nint array[1000000];\r\nvoid selectionSort(int a[],int n);\r\nvoid swap(int &a, int &b);\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (int i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB008', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\n#define char wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\nint  Add(x,sum)\r\n{\r\nif((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nreturn sum;\r\n  \r\n}\r\n\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n }\r\n', 0),
('DEB008', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nusing namespace std;\r\nbool startsWith(char String[], char sub[]);\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++){\r\n		if (*s != *e)\r\n			return False;\r\n		else\r\n	return True;}\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++){\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++){\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n			{	std::cout << "Yes\\n";\r\n			\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}}\r\n	if (flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB008', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nfor(i=0;i<N;i++)\r\n{\r\nif (names[i]!=x)exit(1);\r\nstrcpy(x, names[3]);\r\nelse\r\nbreak;\r\n}\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB008', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\nusing namespace std; \nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdnum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 0),
('DEB008', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\nusing namespace std;\r\nint main() {\r\nint fibo[10000], i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 20),
('DEB009', '1', '1b', '#include <iostream>\r\n\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high)/2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB009', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB009', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n    char *s,*e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB009', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdnum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdNum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 0),
('DEB010', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB010', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB010', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nusing namespace std;\nint main() {\nint p;\ncin>>p;\nwhile (p--) {\nlong long int n, m, k;\nint ans=0;\ncin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\ncout<<ans - 1<<"\\n";\nelse\ncout<<"""0\\n""";\n}\nreturn 0;\n}\n', 0),
('DEB010', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (int i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB010', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==''0 ? ++(sum) : (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB010', '2', '3b', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\nstruct Node {\r\n	int val;\r\n	Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = Null;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		Node *temp = new Node;\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		size++;\r\n		temp->next = top;\r\n		top = temp;\r\n		top->val = elem;\r\n	}\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (Node *i = top; i != NULL; i = i->next)\r\n			if (i->val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (Node *i = top; i != NULL; i = i->next)\r\n			std::cout << i->val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove(10) << "\\n";\r\n	return 0;\r\n}', 0),
('DEB010', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB010', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char **x) {\r\n*x = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(&x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB010', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top - 1; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB010', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\nusing namespace std;\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdNum = firstNum + secondNum;\ncout << thirdNum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdNum;\n}\nreturn 0;\n}\n', 0),
('DEB010', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i-1; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB010', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nusing namespace std;\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions = 0;\r\n	for (int i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--){\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;}\r\n		a[j] = k;\r\n		for (k = 0; k < n; k++)\r\n			cout << array[k] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}', 0),
('DEB011', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB011', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB011', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint p;\r\nscanf("%d",&p);\r\nwhile (p--) {\r\nint n, m, k;\r\nint ans=0;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB011', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (int i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB011', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? ++(sum) : (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB011', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp->next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i->next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i->next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove[10]);\r\n	return 0;\r\n}', 0),
('DEB011', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char *String[], char sub[]) {\r\n	char *s , *e;\r\n	for (*s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (*s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",*s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB011', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", *x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB011', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB011', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%i\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB011', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] , i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\ni++;\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\n\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 14),
('DEB011', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions,i,j,k;\r\n	for (i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k > a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",array[i]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionsort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB012', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB012', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB012', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\n//using namespace std;\r\nint main() {\r\nlong long int p;\r\nscanf("%lld",&p);\r\nwhile (p--) {\r\nlong long int n, m, k;\r\nlong long int ans=0;\r\nscanf("%lld%lld%lld",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%lld\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB012', '2', '1a', '#include<stdio.h>\r\nvoid swap(int *a,int *b);\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++){\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,i,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB012', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[j][i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB012', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp.next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i.next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i.next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove[10]);\r\n	return 0;\r\n}', 0),
('DEB012', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n			\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB012', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name((char*) x[]) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, &names[3]);\r\n}\r\nint main() {\r\n(char *) x[];\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB012', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[top++] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	//top--;\r\n	return data[top-1];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB012', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB012', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i-1; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB012', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions,i,p;\r\n	for (i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--){\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;}\r\n		a[j] = k;\r\n		for (p = 0; p < n; p++)\r\n			printf("%d\\t",array[p]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB013', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarysearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high){\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB013', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n){\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\n{if (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\n}\r\nvoid swap(int *a, int *b){\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main(){\r\nint n,i,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++){\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB013', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		{if (*s != *e)\r\n			return False;\r\n	return True;}\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");}\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB013', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n\\", firstNum);\r\nprintf("%i\\n\\", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n\\", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB014', '1', '1b', '#include <iostream>\nint array[10008];\nint binarySearch(int array[], int low, int high, int element) {\nint mid;\nwhile (low <= high) {\nmid = (low + high) / 2;\nif (array[mid] < element)\nlow = mid + 1;\nelse if (array[mid] > element)\nhigh = mid - 1;\nelse\nreturn mid;\n}\nreturn -1;\n}\nint main() {\nint n, element, i, pos;\ncin >> n;\nfor (i = 0; i < n; i++) {\ncin >> array(i);\n}\ncin >> element;\npos = binarysearch(array, 0, n - 1, element);\ncout << pos << "\\n";\nreturn 0;\n}', 0),
('DEB014', '2', '1b', '#include<iostream>\nint array[1000000];\nvoid swap(int , int);\nvoid selectionSort(int a[], int n) {\nfor (int i = 0; i < n; i++) {\nint min = i;\nfor (int j = i + 1; j < n; j++)\nif (a[j]<a[min])\nmin = j;\nswap(a[min],a[i]);\n}\n}\nvoid swap(int &a, int &b) {\nint temp;\ntemp = a;\na = b;\nb = temp;\n}\nint main() {\nint n;\ncin >> n;\nfor (i = 0; i < n; i++) {\ncin>>array[i];\n}\nselectionsort(array, n);\nfor (int j = 0; j < n; j++)\ncout << array[j] << "\\n";\nreturn 0;\n}', 0),
('DEB014', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\n// starting indices of s2 in s1.\n#include <iostream>\nbool startsWith(char String[], char sub[]) {\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\n		if (*s != *e)\n			return False;\n	return True;\n}\nint main() {\n	char String[400], sub[400];\ncout << "Enter string s1\\n";\ncin >> String;\n	unsigned len1 = 0;\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\n			std::cout << "Invalid Input\\n";\n			return 0;\n		}\ncout << "Enter string s2\\n";\ncin >> sub;\n	bool flag = False;\n	unsigned len2 = 0;\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\n		cout << "Invalid Input\\n";\n			return 0;\n		}\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\n		if (startsWith(s, sub)) {\n			if (!flag)\n				cout << "Yes\\n";\n			cout << s - String << "\\n";\n			flag = True;}\n		}\n	if (!flag)\n		cout << "No\\n";\n	return 0;\n}', 0),
('DEB014', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdnum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdnum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 0),
('DEB015', '1', '1b', '#include "iostream"\r\nusing namespace std;\r\nint array[1008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\ncin >> n;\r\nfor (i = 0; i < n; i++) {\r\ncin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\ncout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB015', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\n{if (number % i == 0)\r\nreturn false;}\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 2; num <= no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 3),
('DEB015', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nusing namespace std;\nint main() {\nint p;\ncin>>p;\nint ans=0;\nwhile (p--) {\nint n, m, k;\n\ncin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\ncout<<ans - 1<<"\\n";\nelse\ncout<<"0\\n";\n}\nreturn 0;\n}\n', 0),
('DEB015', '2', '1b', '#include "iostream"\r\nusing namespace std;\r\nint array[1000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n;\r\ncin >> n;\r\nfor (i = 0; i < n; i++) {\r\ncin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\ncout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB015', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = {"''O'', ''O'', ''O'', ''O'', ''O'', ''O'',       ,''O'',"\r\n               "      ,''O'',            "\r\n               "              ,''O'',    "\r\n               "    ,''O'',   ,''O'',          "};\r\nint sum = 0;\r\n\r\n#define Add(x,sum) ((x)==''0'' ? ++(sum) : (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  \r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0);
INSERT INTO `answers` (`teamid`, `questionid`, `stageid`, `ans`, `time`) VALUES
('DEB015', '2', '3b', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\nstruct Node {\r\n	int val;\r\n	Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = Null;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		Node *temp = new Node;\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		size++;\r\n		top->next = temp;\r\n		 top =temp;\r\n		top->val = elem;\r\n	}\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (Node *i = top; i != NULL; i = i->next)\r\n			if (i->val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (Node *i = top; i != NULL; i = i->next)\r\n			std::cout << i->val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove(10) << "\\n";\r\n	return 0;\r\n}', 0),
('DEB015', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\n#include <string.h>\r\nusing namespace std;\r\nenum bool={''True'',''False''};\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	cout << "Enter string s1\\n";\r\n	cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((strcmp(String[len1],''Z'')>0 || strcmp(String[len1],''A'')<0) && (strcmp(String[len1], ''z'')>0 || strcmp(String[len1],''a'')<0)) {\r\n			cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	cout << "Enter string s2\\n";\r\n	cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((strcmp(sub[len2],''Z'')>0 || strcmp(sub[len2], ''A'')<0) && (strcmp(sub[len2] , ''z'')>0 || strcmp(sub[len2],''a'')<0)) {\r\n			cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				cout << "Yes\\n";\r\n			cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB015', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\n\r\nstrcpy(x, names[3]);\r\nprintf("%s\\n", *x);\r\nfree(x);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\n\r\nreturn 0;\r\n}\r\n', 0),
('DEB015', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n	    this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top ; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n					break;\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n					break;\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n					break;\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n					break;\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB015', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include "iostream"\r\nusing namespace std;\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\ncout << firstNum << "\\n";\r\ncout << secondNum << "\\n";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB015', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000], i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile ((fibo[i-1]+fibo[i-2]) < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB015', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nusing namespace std;\r\nint array[10000];\r\nint insertionSort(int a, int n) {\r\n	int inversions = 0;\r\n	for (int i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			\r\n		a[j] = k;\r\n		\r\n		for (int h = 0; h < n; h++)\r\n			cout << a[h] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}', 0),
('DEB016', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array[], 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB016', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB016', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define true 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (*s = String, *e = sub; *e != ''\\0''; *s++, *e++)\r\n		if (**s != **e)\r\n			return False;\r\n	return true;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB016', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%i\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%u\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB017', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high); // 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB017', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min ;min=i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nvoid swap(int, int);\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB017', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB017', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB018', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB018', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB018', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\nusing namespace std;\r\nint main() {\r\nint p;\r\nscanf("%d",&p);\r\nwhile (p--) {\r\nint n, m, k;\r\nint ans=1;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 5),
('DEB018', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid swap(int *a, int *b);\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = &a;\r\n&a = &b;\r\n&b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (int i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB018', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? ++(sum): (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB018', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp.next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i.next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i.next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove(10));\r\n	return 0;\r\n}', 0),
('DEB018', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (&s != &e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%u\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB018', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB018', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top ];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB018', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB018', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i-1; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB018', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions,i,k;\r\n	for (i = 0; i < n; i++) {\r\n		int k = a[i],j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",a[i]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d", &array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB019', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB019', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB019', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint min,j;\r\nfor (int i = 0; i < n; i++) {\r\nmin = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB019', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,&sum) (x==''0'' ? 1 : x=='' '' ? 0 : sum)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0,j=0;\r\n  while( wing[j][i] !=''\\0'')\r\n  {while( Add( wingT[j][i], sum ) )\r\n    i++;\r\n    j++;\r\n  } /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB019', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB019', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB019', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n\\";\ncout << secondNum << "\\n\\";\nwhile (secondNum < 100) {\nthirdNum = firstNum + secondNum;\ncout << thirdNum << "\\n\\";\nfirstNum = secondNum;\nsecondNum = thirdNum;\n}\nreturn 0;\n}\n', 0),
('DEB019', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB020', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB020', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i <=limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned int num,no_of_test = 100;\r\nfor (num = 2; num <= no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB020', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\nint main() {\r\nint p;\r\nlong long int n, m, k;\r\nint ans;\r\nscanf("%d",&p);\r\nwhile (p>0) {\r\nans=0;\r\nscanf("%lld%lld%lld",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\np--;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB020', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j,min;\r\nfor (i = 0; i < n; i++) {\r\nmin = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB020', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[][] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0,j;\r\n  while( i<5 )\r\n  {\r\n  while(j<11)\r\n  sum=Add(wingT[i][j],sum);\r\n      j++;}i++;}\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB020', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp.next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i->next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i->next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove[10]);\r\n	return 0;\r\n}', 0),
('DEB020', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String&&e = sub; *e != ''\\0''; s++; e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++){\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%d\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB020', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(&x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB020', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top == -1) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB020', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdNum = firstNum + secondNum;\r\nprintf("%d\\n", thirdNum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdNum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB020', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1]+fibo[i-2] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB020', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions=0,i,j,k,temp;\r\n	for (i = 0; i < n-1; i++) {\r\n		int k = a[i], j;\r\n		for (j = i+1; j < n; j++)\r\n			if (k < a[j]) {\r\n			    temp=k;\r\n				k= a[j];\r\n				a[j]=temp;\r\n				inversions++;\r\n			}\r\n			\r\n		for (j = 0; j< n; j++){\r\n			printf("%d\\t",a[j]);\r\n		printf("\\n");}\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB021', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include<stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[],int low,int high,int element){\r\nint mid;\r\nwhile(low<=high){\r\nmid=(low+high)/2;\r\nif(array[mid]<element)\r\nlow=mid+1;\r\nelse if(array[mid]>element)\r\nhigh=mid-1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main(){\r\nint n,element,i,pos;\r\nscanf("%d",&n);\r\nfor(i=0;i<n;i++){\r\nscanf("%d",array[i]);\r\n}\r\nscanf("%d",&element);\r\npos=binarysearch(array,0,n-1,element);\r\nprintf("%d\\n",pos);\r\nreturn 0;\r\n}', 0),
('DEB021', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[],int n){\r\nint i,j;\r\nfor(i=0;i<n;i++){\r\nint min=i;\r\nfor(j=i+1;j<n;j++)\r\nif(a[j]<a[min])\r\nmin=j;\r\nswap(a[min],a[i]);\r\n}\r\n}\r\nvoid swap(int *a,int *b){\r\nint temp;\r\ntemp=*a;\r\n*a=*b;\r\n*b=temp;\r\n}\r\nint main(){\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor(i=0;i<n;i++){\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array,n);\r\nfor(j=0;j<n;j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB021', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include<stdio.h>\r\n#define true 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]){\r\n	char *s ,*e;\r\n	for(s=String,e=sub;*e!=''\\0'';s++,e++)\r\n		if(*s!=*e)\r\n			return False;\r\n	return True;\r\n}\r\nint main(){\r\n	char String[400],sub[400];\r\n	char *s=String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1=0;\r\n	for(len1=0;String[len1]!=''\\0'';len1++)\r\n		if((String[len1]>''Z''||String[len1]<''A'')&&(String[len1]>''z''||String[len1]<''a'')){\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag=False;\r\n	unsigned len2=0;\r\n	for(len2=0;sub[len2]!=''\\0'';len2++)\r\n		if((sub[len2]>''Z''||sub[len2]<''A'')&&(sub[len2]>''z''||sub[len2]<''a'')){\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for(;(s-String)<=(len1-len2);s++)\r\n		if(startsWith(s,sub)){\r\n			if(!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s-String);\r\n			flag=True;}\r\n		}\r\n	if(!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB021', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\nint main() {\r\nint firstNum=0,secondNum=1,thirdNum;\r\nprintf("%d\\n\\",firstNum);\r\nprintf("%d\\n\\",secondNum);\r\nwhile(secondNum<100){\r\nthirdnum=firstNum+secondNum;\r\nprintf("%u\\n\\",thirdnum);\r\nfirstNum=secondNum;\r\nsecondNum=thirdnum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB022', '1', '1b', '#include <iostream>\nusing namespace std;\nint array[10008];\nint binarySearch(int array[], int low, int high, int element) {\nint mid;\nwhile (low <= high) {\nmid = (low + high) / 2;\nif (array[mid] < element)\nlow = mid + 1;\nelse if (array[mid] > element)\nhigh = mid - 1;\nelse\nreturn mid;\n}\nreturn -1;\n}\nint main() {\nint n, element, i, pos;\nstd::cin >> n;\nfor (i = 0; i < n; i++) {\nstd::cin >> array(i);\n}\ncin >> element;\npos = binarysearch(array, 0, n - 1, element);\nstd::cout << pos << "\\n";\nreturn 0;\n}', 1435),
('DEB023', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array[], 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB023', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid swap(int *,int *);\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++){\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(*a[min], *a[i]);\r\n}\r\n}\r\n}\r\nvoid swap(int *a[int x], int *b[int z]) {\r\nint temp;\r\ntemp = *a[x];\r\n*a[x] = *b[z];\r\n*b[z] = temp;\r\n}\r\nint main() {\r\nint i,n,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array[], n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB023', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define true 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String[], e = sub[]; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String[];\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String[]);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++){\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) \r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub[]);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++){\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) \r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++){\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 59),
('DEB023', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%d\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdNum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB024', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array(i);\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB024', '2', '1b', '#include<iostream>\r\nusing namespace std;\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++){\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB024', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nusing namespace std;\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++){\r\n		if (*s != *e)\r\n			return False;\r\n		else\r\n	        return True;\r\n	}\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')){\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++){\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB024', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nint thirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 520);
INSERT INTO `answers` (`teamid`, `questionid`, `stageid`, `ans`, `time`) VALUES
('DEB025', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\n\r\n    int array[10008];//global array\r\n    int binarysearch(int low, int high, int element) \r\n    {\r\n        int mid;\r\n        while (low <= high) \r\n        {\r\n         mid = (low + high) /2;\r\n            if (array[mid] < element)\r\n                 low = mid + 1;\r\n            elseif (array[mid] > element)\r\n                     high = mid - 1;\r\n            else\r\n                return mid;\r\n    }\r\n    return -1;\r\n}\r\nint main() \r\n{\r\n    int n, element, i, pos;\r\n    scanf("%d", &n);\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        scanf("%d", &array[i]);\r\n    }\r\n    scanf("%d", &element);\r\n    pos = binarysearch(0, n-1, element);\r\n    printf("%d\\n", pos);\r\n    return 0;\r\n}', 0),
('DEB025', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) \r\n{\r\n\r\n    unsigned int i,limit = number/2;\r\n    for (i = 2; i <= limit; i++)\r\n        if (number % i == 0)\r\n            return 0;\r\n    return 1;\r\n}\r\nint main() \r\n{\r\n    unsigned num,no_of_test = 100;\r\n    for (num = 1; num <= no_of_test; num++) \r\n    {\r\n        \r\n        \r\n            if (isprime(num))\r\n            printf("%d\\n", num);\r\n            \r\n        \r\n    }\r\n    return 0;\r\n}\r\n', 0),
('DEB025', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionsort(int n) \r\n{\r\n    int i,j;\r\n    for (i = 0; i < n; i++) \r\n    {\r\n        int min = i;\r\n        for (j = i + 1; j < n; j++)\r\n            if (a[j]<a[min])\r\n                min = j;\r\n            swap(min, i);\r\n    }\r\n}\r\nvoid swap(int a, int b)\r\n{\r\n    int temp;\r\n    temp = array[a];\r\n    array[a]= array[b];\r\n    array[a]= temp;\r\n}\r\nint main() \r\n{\r\n    int n,j;\r\n    scanf("%d",&n);\r\n        for (i = 0; i < n; i++) \r\n        {\r\n            scanf("%d",&array[i]);\r\n        }\r\n    selectionsort(n);\r\n    for (j = 0; j < n; j++)\r\n        printf("%d\\n",array[j]);\r\n    return 0;\r\n}', 0),
('DEB025', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O                     O                          O        O   O          ";\r\n int sum = 0;\r\n    int check(char a)\r\n    {\r\n        if(a==''O'')\r\n        {\r\n            ++sum;\r\n            return 1;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\nint main()\r\n{\r\n \r\n  int i=0;\r\n  while( check( wingT[i++]) )/* keep looping */;\r\n     \r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB025', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) \r\n{\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() \r\n{\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'') || (String[len1] < ''A'') && (String[len1] > ''z'') || (String[len1] < ''a'')) \r\n		{\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'') || (sub[len2] < ''A'') && (sub[len2] > ''z'') || (sub[len2] < ''a''))\r\n		{\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (s=String; (s - String) <= (len1 - len2); s++)\r\n	{\r\n		if (startsWith(s, sub)) \r\n		{\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			\r\n			    printf("%p\\n",s - String);\r\n			    flag = True;\r\n			}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB025', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB025', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() \r\n{\r\n    int firstNum = 0, secondNum = 1, thirdNum;\r\n    printf("%d\\n", firstNum);\r\n    printf("%d\\n", secondNum);\r\n    while (secondNum < 100)\r\n    {\r\n    thirdNum = firstNum + secondNum;\r\n    printf("%d\\n", thirdNum);\r\n    firstNum = secondNum;\r\n    secondNum = thirdNum;\r\n    }\r\n    return 0;\r\n}', 219),
('DEB025', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB026', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\nstd::cin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB026', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 1; num <= no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB026', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB026', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)!=0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB026', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB026', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", &x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB026', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdNum = firstNum + secondNum;\r\ncout << thirdNum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdNum;\r\n}\r\nreturn 0;\r\n}\r\n', 35),
('DEB026', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 3;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB027', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarysearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array(i);\r\n}\r\ncin >> element;\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB027', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionsort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (int i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionsort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB027', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB027', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB028', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB028', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB028', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\nint main() {\r\nint p;\r\nscanf("%d",&p);\r\nwhile (p--) {\r\nlong int n, m, k;\r\nint ans=0;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB028', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid swap(int *a, int *b);\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB028', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? ++(sum) : (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB028', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Nodes {\r\n	int val;\r\n	struct Nodes *next;\r\n};\r\ntypedef struct Nodes Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = NULL;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp->next = top;\r\n	top = temp;\r\n	top->val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i->next)\r\n		if (i->val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i->next)\r\n		printf("%d ",i->val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove(10));\r\n	return 0;\r\n}', 0),
('DEB028', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++){\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB028', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nx = (char *)malloc(100);\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB028', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i > 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: \r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				    break;\r\n			case 2: \r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				    break;\r\n			case 3:		\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				    break;\r\n			case 4:		\r\n					show();\r\n				    break;\r\n			default:	\r\n					printf("WRONG OPTION\\n");\r\n				\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB028', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%d\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%u\\n", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}', 387),
('DEB028', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\ni++;\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 162),
('DEB028', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions=0,i,j,k;\r\n	for (i = 1; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--){\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j-1] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",a[i]);\r\n		printf("\\n");}\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB029', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) // 2;\r\nif (array[mid] <= element)\r\nlow = mid + 1;\r\nelse if (array[mid] >= element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin > n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array(i);\r\n}\r\ncin > element\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB029', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n+1; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionsort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB029', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 87),
('DEB029', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB030', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\ncin >>n;\r\nfor (i = 0; i < n; i++) {\r\ncin >> array[i];\r\n}\r\ncin >> element\r\npos = binarySearch(array, 0, n - 1, element);\r\ncout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB030', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB030', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 97),
('DEB030', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? ++(sum) : (x)=='' '' ? 1 : 0)\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 5),
('DEB030', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return false;\r\n	return true;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = false;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = true;}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB030', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nchar * names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB030', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\nusing namespace std;\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB030', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i++] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB031', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", &array[i]);\r\n}\r\nscanf("%d", &element);\r\npos = binarySearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB031', '1', '2a', '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i <= limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 2; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB031', '1', '3a', '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\n//using namespace std;\r\nint main() {\r\nint p,n, m, k,ans;\r\nscanf("%d",&p);\r\nwhile (p--) {\r\n//int ;\r\nans=0;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB031', '2', '1a', '#include<stdio.h>\r\nint array[1000000];void swap(int *,int*);\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(&a[min], &a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j,i;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectionSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB031', '2', '2a', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==''\\0'' ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB031', '2', '3a', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp->next = top;\r\n	top = temp;\r\n	top->val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i->next)\r\n		if (i->val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i->next)\r\n		printf("%d ",i->val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove(10));\r\n	return 0;\r\n}', 0),
('DEB031', '3', '1a', '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define True 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}', 0),
('DEB031', '3', '2a', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char *  names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0),
('DEB031', '3', '3a', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[top++] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top+1];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);break;\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);break;\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);break;\r\n				}\r\n			case 4:		{\r\n					show();break;\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB031', '4', '1a', '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\nprintf("%d\\n", firstNum);\r\nprintf("%i\\n", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%i\\n", thirdNum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdNum;\r\n}\r\nreturn 0;\r\n}', 0),
('DEB031', '4', '2a', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] , i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i+1] = fibo[i - 1] + fibo[i];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n', 0),
('DEB031', '4', '3a', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a[], int n) {\r\n	int inversions=0,i,j,k;\r\n	for (i = 0; i < n; i++) {\r\n		 k = a[i];\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",array[i]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&array[i]);\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}', 0),
('DEB032', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\nstd::cin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB032', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned int i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned int num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 196),
('DEB032', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nint main() {\nint p;\nstd::cin>>p;\nwhile (p--) {\nint n, m, k;\nint ans=1;\nstd::cin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\nstd::cout<<ans - 1<<"\\n";\nelse\nstd::cout<<"0\\n";\n}\nreturn 0;\n}\n', 0),
('DEB032', '2', '1b', '#include<iostream>\r\nint array[10008];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB032', '2', '2b', '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)=='' '' ? 1 : (x)==0 ? ++(sum) :0 )\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n', 0),
('DEB032', '2', '3b', '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	struct Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = Null;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		struct Node *temp = new Node();\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		size++;\r\n		temp->next = top;\r\n		top = temp;\r\n		top.val = elem;\r\n	}\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (struct Node *i = top; i != NULL; i = i->next)\r\n			if (i.val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (struct Node *i = top; i != NULL; i = i->next)\r\n			std::cout << i.val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove(10) << "\\n";\r\n	return 0;\r\n}', 0),
('DEB032', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned int len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned int len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB032', '3', '2b', '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char *names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nx = (char *)malloc(100);\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n', 0);
INSERT INTO `answers` (`teamid`, `questionid`, `stageid`, `ans`, `time`) VALUES
('DEB032', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = -1;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top--];\r\n	\r\n	}\r\n	int peek() {\r\n		if (top < 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top];\r\n	}\r\n	void show() {\r\n		if (top < 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top ; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n					break;\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n					break;\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n					break;\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n					break;\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB032', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 687),
('DEB032', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile ((fibo[i-1]+fibo[i-2]) < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 0),
('DEB032', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nint array[10008];\r\nusing namespace std;\r\nint insertionSort(int a, int n) {\r\n	int inversions = 0;\r\n	for (int i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			cout << array[i] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionsort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}', 160),
('DEB033', '1', '1b', '#include<iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB033', '2', '1b', '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionSort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB033', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include<iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400];\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}', 0),
('DEB033', '4', '1b', '// This program prints the Fibonacci numbers less than 100\r\n#include<iostream>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdnum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB034', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 0),
('DEB034', '2', '1b', '#include<iostream>\nint array[1000000];\nvoid selectionSort(int a[], int n) {\nfor (int i = 0; i < n; i++) {\nint min = i;\nfor (int j = i + 1; j < n; j++)\nif (a[j]<a[min])\nmin = j;\nswap(a[min], a[i]);\n}\n}\nvoid swap(int &a, int &b) {\nint temp;\ntemp = a;\na = b;\nb = temp;\n}\nint main() {\nint n;\nstd::cin >> n;\nfor (i = 0; i < n; i++) {\nstd::cin>>array[i];\n}\nselectionSort(array, n);\nfor (int j = 0; j < n; j++)\nstd::cout << array[j] << "\\n";\nreturn 0;\n}', 0),
('DEB034', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\n// starting indices of s2 in s1.\n#include <iostream>\nbool startsWith(char String[], char sub[]) {\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\n		if (*s != *e)\n			return False;\n	return True;\n}\nint main() {\n	char String[400], sub[400];\n	std::cout << "Enter string s1\\n";\n	std::cin >> String;\n	unsigned int len1 = 0;\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\n			std::cout << "Invalid Input\\n";\n			return 0;\n		}\n	std::cout << "Enter string s2\\n";\n	std::cin >> sub;\n	boolean flag = False;\n	unsigned int len2 = 0;\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\n			std::cout << "Invalid Input\\n";\n			return 0;\n		}\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\n		if (startsWith(s, sub)) {\n			if (!flag)\n				std::cout << "Yes\\n";\n			std::cout << s - String << "\\n";\n			flag = True;}\n		}\n	if (!flag)\n		std::cout << "No\\n";\n	return 0;\n}', 0),
('DEB034', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdnum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdnum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 1002),
('DEB035', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 791),
('DEB035', '2', '1b', '#include<iostream>\nint array[1000000];\nvoid selectionSort(int a[], int n) {\nfor (int i = 0; i < n; i++) {\nint min = i;\nfor (int j = i + 1; j < n; j++)\n{if (a[j]<a[min])\nmin = j;\nswap(a[min], a[i]);}\n}\n}\nvoid swap(int &a, int &b) {\nint temp;\ntemp = a;\na = b;\nb = temp;\n}\nint main() {\nint n;\nstd::cin >> n;\nfor (int i = 0; i < n; i++) {\nstd::cin>>array[i];\n}\nselectionsort(array, n);\nfor (int j = 0; j < n; j++)\n{std::cout << array[j] << "\\n";\nreturn 0;}\n}', 0),
('DEB035', '3', '1b', '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\n// starting indices of s2 in s1.\n#include <iostream>\nbool startsWith(char String[], char sub[]) {\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\n		if (*s != *e)\n			return False;\n	return True;\n}\nint main() {\n	char String[400], sub[400];\n	std::cout << "Enter string s1\\n";\n	std::cin >> String;\n	unsigned len1 = 0;\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\n			std::cout << "Invalid Input\\n";\n			return 0;\n		}\n	std::cout << "Enter string s2\\n";\n	std::cin >> sub;\n	bool flag = False;\n	unsigned len2 = 0;\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\n			std::cout << "Invalid Input\\n";\n			return 0;\n		}\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\n		{if (startsWith(s, sub)) {\n			if (!flag)\n				std::cout << "Yes\\n";\n			std::cout << s - String << "\\n";\n			flag = True;}}\n		}\n	if (!flag)\n		std::cout << "No\\n";\n	return 0;\n}', 0),
('DEB035', '4', '1b', '// This program prints the Fibonacci numbers less than 100\n#include <iostream>\n\nint main() {\nint firstNum = 0, secondNum = 1, thirdNum;\ncout << firstNum << "\\n";\ncout << secondNum << "\\n";\nwhile (secondNum < 100) {\nthirdnum = firstNum + secondNum;\ncout << thirdnum << "\\n";\nfirstNum = secondNum;\nsecondNum = thirdnum;\n}\nreturn 0;\n}\n', 0),
('DEB998', '1', '1a', '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) // 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {sdfhkjdsfhjdf\r\nscanf("%d", array(i));\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}', 0),
('DEB998', '2', '1a', '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}', 0),
('DEB999', '1', '1b', '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) / 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array[i];\r\n}\r\ncin >> element;\r\npos = binarySearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}', 1752),
('DEB999', '1', '2b', '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n', 0),
('DEB999', '1', '3b', '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nint main() {\nint p;\ncin>>p;\nwhile (p--) {\nint n, m, k;\nint ans;\ncin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\ncout<<ans - 1<<"\\n";\nelse\ncout<<"""0\\n""";\n}\nreturn 0;\n}\n', 0),
('DEB999', '3', '3b', '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top - 1; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}', 0),
('DEB999', '4', '2b', '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i-1] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i-1; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n', 1720),
('DEB999', '4', '3b', '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nint array[100008];\r\nint insertionSort(int a, int n) {\r\n	int inversions = 0;\r\n	for (int i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (k = 0; k < n; k++)\r\n			cout << array[k] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionSort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}', 1702);

-- --------------------------------------------------------

--
-- Table structure for table `manager`
--

CREATE TABLE IF NOT EXISTS `manager` (
  `username` varchar(20) NOT NULL,
  `password` varchar(20) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `manager`
--

INSERT INTO `manager` (`username`, `password`) VALUES
('gobmanager', 'bugsofgame');

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

CREATE TABLE IF NOT EXISTS `questions` (
  `stageid` varchar(2) NOT NULL,
  `questionid` tinyint(4) NOT NULL,
  `question` longtext NOT NULL,
  PRIMARY KEY (`stageid`,`questionid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`stageid`, `questionid`, `question`) VALUES
('1a', 1, '/* This program does binary search and gives the position of an input element \r\n * in a 0-indexed array\r\n */\r\n\r\n#include <stdio.h>\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) // 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nscanf("%d", &n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d", array(i));\r\n}\r\nscanf("%d", &element);\r\npos = binarysearch(array, 0, n - 1, element);\r\nprintf("%d\\n", pos);\r\nreturn 0;\r\n}'),
('1a', 2, '#include<stdio.h>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nint i,j;\r\nfor (i = 0; i < n; i++) {\r\nint min = i;\r\nfor (j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int *a, int *b) {\r\nint temp;\r\ntemp = *a;\r\n*a = *b;\r\n*b = temp;\r\n}\r\nint main() {\r\nint n,j;\r\nscanf("%d",&n);\r\nfor (i = 0; i < n; i++) {\r\nscanf("%d",&array[i]);\r\n}\r\nselectoinSort(array, n);\r\nfor (j = 0; j < n; j++)\r\nprintf("%d\\n",array[j]);\r\nreturn 0;\r\n}'),
('1a', 3, '/* Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n * [a-z,A-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n * starting indices of s2 in s1.\r\n */\r\n \r\n#include <stdio.h>\r\n#define true 1\r\n#define False O\r\n\r\nint startsWith(char String[], char sub[]) {\r\n	char *s , *e;\r\n	for (s = String, e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	char *s = String;\r\n	printf("Enter string s1\\n");\r\n	scanf("%s",String);\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	printf("Enter string s2\\n");\r\n	scanf("%s",sub);\r\n	int flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			printf("Invalid Input\\n");\r\n			return 0;\r\n		}\r\n	for (; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				printf("Yes\\n");\r\n			printf("%ld\\n",s - String);\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		printf("No\\n");\r\n	return 0;\r\n}'),
('1a', 4, '// This program prints the Fibonacci numbers less than 100\r\n#include <stdio.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\nprintf("%d\\n\\", firstNum);\r\nprintf("%i\\n\\", secondNum);\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\nprintf("%u\\n\\", thirdnum);\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}'),
('1b', 1, '#include <iostream>\r\nusing namespace std;\r\nint array[10008];\r\nint binarySearch(int array[], int low, int high, int element) {\r\nint mid;\r\nwhile (low <= high) {\r\nmid = (low + high) // 2;\r\nif (array[mid] < element)\r\nlow = mid + 1;\r\nelse if (array[mid] > element)\r\nhigh = mid - 1;\r\nelse\r\nreturn mid;\r\n}\r\nreturn -1;\r\n}\r\nint main() {\r\nint n, element, i, pos;\r\nstd::cin > n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin >> array(i);\r\n}\r\ncin > element\r\npos = binarysearch(array, 0, n - 1, element);\r\nstd::cout << pos << "\\n";\r\nreturn 0;\r\n}'),
('1b', 2, '#include<iostream>\r\nint array[1000000];\r\nvoid selectionSort(int a[], int n) {\r\nfor (int i = 0; i < n; i++) {\r\nint min = i;\r\nfor (int j = i + 1; j < n; j++)\r\nif (a[j]<a[min])\r\nmin = j;\r\nswap(a[min], a[i]);\r\n}\r\n}\r\nvoid swap(int &a, int &b) {\r\nint temp;\r\ntemp = a;\r\na = b;\r\nb = temp;\r\n}\r\nint main() {\r\nint n;\r\nstd::cin >> n;\r\nfor (i = 0; i < n; i++) {\r\nstd::cin>>array[i];\r\n}\r\nselectionsort(array, n);\r\nfor (int j = 0; j < n; j++)\r\nstd::cout << array[j] << "\\n";\r\nreturn 0;\r\n}'),
('1b', 3, '// Given two strings, say s1 and s2, consisting of letters from the English alphabet only\r\n// [a-zA-Z]. Write a program to check whether s2 is a substring of s1. If yes, print the\r\n// starting indices of s2 in s1.\r\n#include <iostream>\r\nbool startsWith(char String[], char sub[]) {\r\n	for (char *s = String, *e = sub; *e != ''\\0''; s++, e++)\r\n		if (*s != *e)\r\n			return False;\r\n	return True;\r\n}\r\nint main() {\r\n	char String[400], sub[400]\r\n	std::cout << "Enter string s1\\n";\r\n	std::cin >> String;\r\n	unsigned len1 = 0;\r\n	for (len1 = 0; String[len1] != ''\\0''; len1++)\r\n		if ((String[len1] > ''Z'' || String[len1] < ''A'') && (String[len1] > ''z'' || String[len1] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	std::cout << "Enter string s2\\n";\r\n	std::cin >> sub;\r\n	bool flag = False;\r\n	unsigned len2 = 0;\r\n	for (len2 = 0; sub[len2] != ''\\0''; len2++)\r\n		if ((sub[len2] > ''Z'' || sub[len2] < ''A'') && (sub[len2] > ''z'' || sub[len2] < ''a'')) {\r\n			std::cout << "Invalid Input\\n";\r\n			return 0;\r\n		}\r\n	for (char *s = String; (s - String) <= (len1 - len2); s++)\r\n		if (startsWith(s, sub)) {\r\n			if (!flag)\r\n				std::cout << "Yes\\n";\r\n			std::cout << s - String << "\\n";\r\n			flag = True;}\r\n		}\r\n	if (!flag)\r\n		std::cout << "No\\n";\r\n	return 0;\r\n}'),
('1b', 4, '// This program prints the Fibonacci numbers less than 100\r\n#include <iostream.h>\r\n\r\nint main() {\r\nint firstNum = 0, secondNum = 1, thirdNum;\r\ncout << firstNum << "\\n\\";\r\ncout << secondNum << "\\n\\";\r\nwhile (secondNum < 100) {\r\nthirdnum = firstNum + secondNum;\r\ncout << thirdnum << "\\n\\";\r\nfirstNum = secondNum;\r\nsecondNum = thirdnum;\r\n}\r\nreturn 0;\r\n}\r\n'),
('2a', 1, '/* Print all the prime numbers less than or equal to 100\r\n */\r\n\r\n#include <stdio.h>\r\nint isprime(unsigned int number) {\r\nunsigned int i,limit = number / 2;\r\nfor (i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn 0;\r\nreturn 1;\r\n}\r\nint main() {\r\nunsigned num,no_of_test = 100;\r\nfor (num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nprintf("%d\\n", num);\r\n}\r\nreturn 0;\r\n}\r\n'),
('2a', 2, '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. \r\n * What''s going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n'),
('2a', 3, '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. \r\n * Can you fix the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n'),
('2a', 4, '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <stdio.h>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2,j;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (j = 0; j < i; j++)\r\nprintf("%d ", fibo[j]);\r\nprintf("\\n");\r\nreturn 0;\r\n}\r\n'),
('2b', 1, '/* Print all prime numbers that are less than or equal to 100*/\r\n\r\n#include <iostream>\r\nbool isprime(unsigned int number) {\r\nunsigned int limit = number / 2;\r\nfor (unsigned i = 2; i < limit; i++)\r\nif (number % i == 0)\r\nreturn false;\r\nreturn true;\r\n}\r\nint main() {\r\nunsigned no_of_test = 100;\r\nfor (unsigned num = 1; num < no_of_test; num++) {\r\nif (isprime(num))\r\nstd::cout << num << "\\n";\r\n}\r\nreturn 0;\r\n}\r\n'),
('2b', 2, '/* The local college coach was using a C program to check the validity \r\n * of his formations but he suspects something wrong when the player \r\n * count shows wrong valus rather than the expected 11. What''s \r\n * going wrong?\r\n */\r\n\r\n#include <stdio.h>\r\nchar wingT[] = "O O O O O O       O"\r\n               "      O            "\r\n               "              O    "\r\n               "    O   O          ";\r\n\r\n#define Add(x,sum) ((x)==0 ? 0 : (x)=='' '' ? 1 : ++(sum))\r\nint main()\r\n{\r\n  int sum = 0;\r\n  int i=0;\r\n  while( Add( wingT[i++], sum ) )\r\n      /* keep looping */;\r\n   printf( "The number of players in the wingT "\r\n            "formation is %d\\n", sum );\r\n   return sum;\r\n }\r\n'),
('2b', 3, '/*The program aims to print the third name from the array "names". But \r\n * due to an error in the program, the program crashes. Can you fix \r\n * the bug? \r\n */\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#define N 5\r\nconst char * const names[N] = {\r\n"Red Sox", "Yankees", "Giants",\r\n"Rangers", "Phillies"\r\n};\r\nvoid find_name(char *x) {\r\nx = (char *)malloc(100);\r\nif (!x) exit(1);\r\nstrcpy(x, names[3]);\r\n}\r\nint main() {\r\nchar *x;\r\nfind_name(x);\r\nprintf("%s\\n", x);\r\nfree(x);\r\nreturn 0;\r\n}\r\n'),
('2b', 4, '/* This program Stores the Fibonacci numbers less than 1000 in an array \r\n * and then prints it\r\n */\r\n \r\n#include <iostream>\r\n\r\nint main() {\r\nint fibo[10000] = {0}, i = 2;\r\nfibo[0] = 0;\r\nfibo[1] = 1;\r\nfibo[2] = fibo[1] + fibo[0];\r\nwhile (fibo[i] < 1000) {\r\nfibo[i] = fibo[i - 1] + fibo[i - 2];\r\ni++;\r\n}\r\nfor (int j = 0; j < i; j++)\r\nstd::cout << fibo[j] << " ";\r\nstd::cout << "\\n";\r\nreturn 0;\r\n}\r\n'),
('3a', 1, '// Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\r\n// of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\r\n// time t=T. Can you find this value T.\r\n\r\n// Constraints:\r\n// 1 â‰¤ P â‰¤ 10^4\r\n// 2 â‰¤ N, K, M â‰¤ 10^18\r\n\r\n#include <stdio.h>\r\nusing namespace std;\r\nint main() {\r\nint p;\r\nscanf("%d",p);\r\nwhile (p--) {\r\nint n, m, k;\r\nint ans;\r\nscanf("%d%d%d",&n,&k,&m);\r\nwhile (n <= m) {\r\nans++;\r\nn *= k;\r\n}\r\nif (ans > 0)\r\nprintf("%d\\n""",ans-1);\r\nelse\r\nprintf("0\\n");\r\n}\r\nreturn 0;\r\n}\r\n'),
('3a', 2, '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\nstruct Node {\r\n	int val;\r\n	struct Node *next;\r\n};\r\ntypedef struct Node Node;\r\nNode *top;\r\nint size;\r\nvoid SinglyLinkedList() {\r\n	top = Null;\r\n	size = 0;\r\n}\r\nvoid insert(int elem) {\r\n	Node *temp = (Node*) malloc(sizeof(Node));\r\n	if (temp == NULL) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	size++;\r\n	temp.next = top;\r\n	top = temp;\r\n	top.val = elem;\r\n}\r\nint countAbove(int value) {\r\n	int c = 0;\r\n	Node *i;\r\n	for (i = top; i != NULL; i = i.next)\r\n		if (i.val > value)\r\n			c++;\r\n	return c;\r\n}\r\nvoid show() {\r\n	Node *i;\r\n	if (top == NULL) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top; i != NULL; i = i.next)\r\n		printf("%d ",i.val);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	int n = 1, elem,i;\r\n	scanf("%d",&n);\r\n	SinglyLinkedList();\r\n	if (n < 1) {\r\n		printf("Invalid Size\\n");\r\n		return 0;\r\n	}\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",&elem);\r\n		insert(elem);\r\n	}\r\n	printf("%d\\n",countAbove[10]);\r\n	return 0;\r\n}'),
('3a', 3, '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <stdio.h>\r\nint data[101];\r\nint top;\r\nint capacity;\r\nvoid Stack() {\r\n	top = 0;\r\n	capacity = 100;\r\n}\r\nvoid setCapacity(int newCapacity) {\r\n	if (newCapacity <= 100)\r\n		capacity = newCapacity;\r\n}\r\nvoid push(int elem) {\r\n	if (top >= capacity) {\r\n		printf("OVERFLOW\\n");\r\n		return;\r\n	}\r\n	data[++top] = elem;\r\n}\r\nint pop() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	top--;\r\n	return data[top];\r\n}\r\nint peek() {\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return -1;\r\n	}\r\n	return data[top - 1];\r\n}\r\nvoid show() {\r\n	int i;\r\n	if (top <= 0) {\r\n		printf("EMPTY\\n");\r\n		return;\r\n	}\r\n	for (i = top - 1; i >= 0; i--)\r\n		printf("%d ",data[i]);\r\n	printf("\\n");\r\n}\r\n\r\nint main() {\r\n	Stack();\r\n	int cap, option = 1, elem;\r\n	scanf("%d",&cap);\r\n	setCapacity(cap);\r\n	while (option != 0) {\r\n		scanf("%d",&option);\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					scanf("%d",&elem);\r\n					push(elem);\r\n				}\r\n			case 2: {\r\n					elem = pop();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 3:		{\r\n					elem = peek();\r\n					if (elem != -1)\r\n						printf("%d\\n",elem);\r\n				}\r\n			case 4:		{\r\n					show();\r\n				}\r\n			default:	{\r\n					printf("WRONG OPTION\\n");\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}'),
('3a', 4, '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <stdio.h>\r\nint array[100008];\r\nint insertionSort(int a, int n) {\r\n	int inversions,i,j,k;\r\n	for (i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			printf("%d\\t",array[i]);\r\n		printf("\\n");\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion,j;\r\n	scanf("%d",&n);\r\n	for (i = 0; i < n; i++) {\r\n		scanf("%d",array[i]);\r\n	}\r\n	inversion = insertionsort(array, n);\r\n	for (j = 0; j < n; j++)\r\n		printf("%d\\t",array[j]);\r\n	printf("\\n%d\\n",inversion);\r\n	return 0;\r\n}'),
('3b', 1, '/*\n\n Initially, there are N atoms. Starting from now (t=0), after each second, every atom will break into K atoms\n of the same type. They donâ€™t want the number of atoms to exceed M, so they have to stop the reaction at some\n time t=T. Can you find this value T.\n\n Constraints:\n 1 â‰¤ P â‰¤ 10^4\n 2 â‰¤ N, K, M â‰¤ 10^18 \n \n */\n\n#include <iostream>\nint main() {\nint p;\ncin>>p;\nwhile (p--) {\nint n, m, k;\nint ans;\ncin>>n>>k>>m;\nwhile (n <= m) {\nans++;\nn *= k;\n}\nif (ans > 0)\ncout<<ans - 1<<"\\n";\nelse\ncout<<"""0\\n""";\n}\nreturn 0;\n}\n'),
('3b', 2, '/*\r\nImplement a Singly Linked List and count the numbers in the list greater than 10\r\n*/\r\n#include <iostream>\r\nstruct Node {\r\n	int val;\r\n	Node *next;\r\n};\r\nclass SinglyLinkedList {\r\n	Node *top;\r\n	int size;\r\n  public:\r\n	SinglyLinkedList() {\r\n		this->top = Null;\r\n		size = 0;\r\n	}\r\n	void insert(int elem) {\r\n		Node *temp = new Node;\r\n		if (temp == NULL) {\r\n			std::cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		size++;\r\n		temp.next = top;\r\n		top = temp;\r\n		top.val = elem;\r\n	}\r\n	int countAbove(int value) {\r\n		int c = 0;\r\n		for (Node *i = top; i != NULL; i = i.next)\r\n			if (i.val > value)\r\n				c++;\r\n		return c;\r\n	}\r\n	void show() {\r\n		if (top == NULL) {\r\n			std::cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (Node *i = top; i != NULL; i = i.next)\r\n			std::cout << i.val << " ";\r\n		std::cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	SinglyLinkedList list;\r\n	int n = 1, elem;\r\n	std::cin >> n;\r\n	if (n < 1) {\r\n		std::cout << "Invalid Size\\n";\r\n		return 0;\r\n	}\r\n	for (int i = 0; i < n; i++) {\r\n		std::cin >> elem;\r\n		list.insert(elem);\r\n	}\r\n	std::cout << list.countAbove[10] << "\\n";\r\n	return 0;\r\n}'),
('3b', 3, '/*\r\nImplement a stack using an array\r\nWrite a menu driven program with the following options\r\n->	The integer 0 means stop the program.\r\n->	The integer 1 means push the next integer from the input on the stack. In this case,\r\n	the next integer is given on the same line as the 1, separated by a space.\r\n->	The integer 2 means pop and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 3 means peek and output the topmost element of the stack. Output\r\n	â€œEMPTYâ€, if the stack was originally empty.\r\n->	The integer 4 means show all elements in the stack. In this case, output all elements\r\n	of the stack on a single line, separated by space, starting with the top most element.\r\n	Output â€œEMPTYâ€, if the stack was originally empty.\r\n*/\r\n#include <iostream>\r\nusing namespace std;\r\nclass Stack {\r\n	int data[101];\r\n	int top;\r\n	int capacity;\r\n  public:\r\n	Stack() {\r\n		this->top = 0;\r\n		this->capacity = 100;\r\n	}\r\n	void setCapacity(int newCapacity) {\r\n		if (newCapacity <= 100)\r\n			this->capacity = newCapacity;\r\n	}\r\n	void push(int elem) {\r\n		if (top >= capacity) {\r\n			cout << "OVERFLOW\\n";\r\n			return;\r\n		}\r\n		data[++top] = elem;\r\n	}\r\n	int pop() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		top--;\r\n		return data[top];\r\n	}\r\n	int peek() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return -1;\r\n		}\r\n		return data[top - 1];\r\n	}\r\n	void show() {\r\n		if (top <= 0) {\r\n			cout << "EMPTY\\n";\r\n			return;\r\n		}\r\n		for (int i = top - 1; i >= 0; i--)\r\n			cout << data[i] << " ";\r\n		cout << "\\n";\r\n	}\r\n};\r\nint main() {\r\n	Stack stk;\r\n	int cap, option = 1, elem;\r\n	cin >> cap;\r\n	stk.setCapacity(cap);\r\n	while (option != 0) {\r\n		cin >> option;\r\n		switch (option) {\r\n			case 0:\r\n				break;\r\n			case 1: {\r\n					cin >> elem;\r\n					stk.push(elem);\r\n				}\r\n			case 2: {\r\n					elem = stk.pop();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 3:		{\r\n					elem = stk.peek();\r\n					if (elem != -1)cout << elem << "\\n";\r\n				}\r\n			case 4:		{\r\n					stk.show();\r\n				}\r\n			default:	{\r\n					cout << "WRONG OPTION\\n";\r\n				}\r\n		}\r\n	}\r\n	return 0;\r\n}'),
('3b', 4, '// Implement the insertion sort algorithm to sort the given array A, as well as to count the number of inversions.\r\n// Also on each pass of the insertion sort print the array\r\n// Number of insertion = pairs of (i,j) such that i<j and A[i]>A[j]\r\n#include <iostream>\r\nint array[100008];\r\nint insertionSort(int a, int n) {\r\n	int inversions = 0;\r\n	for (int i = 0; i < n; i++) {\r\n		int k = a[i], j;\r\n		for (j = i; j > 0; j--)\r\n			if (k < a[j - 1]) {\r\n				a[j] = a[j - 1];\r\n				inversions++;\r\n			}\r\n			else break;\r\n		a[j] = k;\r\n		for (i = 0; i < n; i++)\r\n			cout << array[i] << "\\t";\r\n		cout << "\\n";\r\n	}\r\n	return inversions;\r\n}\r\nint main() {\r\n	int n, i, inversion;\r\n	cin >> n;\r\n	for (i = 0; i < n; i++) {\r\n		cin >> array[i];\r\n	}\r\n	inversion = insertionsort(array, n);\r\n	for (int j = 0; j < n; j++)\r\n		cout << array[j] << "\\t";\r\n	cout << "\\n";\r\n	cout << inversion << "\\n";\r\n	return 0;\r\n}');

-- --------------------------------------------------------

--
-- Table structure for table `quiz`
--

CREATE TABLE IF NOT EXISTS `quiz` (
  `teamid` varchar(7) NOT NULL,
  `stageid` varchar(2) NOT NULL,
  `timeLeft` int(11) NOT NULL,
  PRIMARY KEY (`teamid`,`stageid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `quiz`
--

INSERT INTO `quiz` (`teamid`, `stageid`, `timeLeft`) VALUES
('DEB001', '1b', 8),
('DEB001', '2b', 8),
('DEB002', '1b', 8),
('DEB002', '2b', 8),
('DEB002', '3b', 8),
('DEB003', '1b', 58),
('DEB003', '2b', 8),
('DEB003', '3b', 8),
('DEB004', '1b', 8),
('DEB005', '1a', 8),
('DEB005', '2a', 8),
('DEB005', '3a', 8),
('DEB006', '1a', 8),
('DEB006', '2a', 8),
('DEB007', '1a', 8),
('DEB007', '2a', 8),
('DEB008', '1b', 138),
('DEB008', '2b', 28),
('DEB009', '1b', 8),
('DEB010', '1b', 8),
('DEB010', '2b', 8),
('DEB010', '3b', 8),
('DEB011', '1a', 8),
('DEB011', '2a', 18),
('DEB011', '3a', 8),
('DEB012', '1a', 8),
('DEB012', '2a', 8),
('DEB012', '3a', 8),
('DEB013', '1a', 8),
('DEB014', '1b', 8),
('DEB015', '1b', 8),
('DEB015', '2b', 8),
('DEB015', '3b', 8),
('DEB016', '1a', 8),
('DEB017', '1b', 8),
('DEB018', '1a', 8),
('DEB018', '2a', 8),
('DEB018', '3a', 8),
('DEB019', '1b', 8),
('DEB019', '2b', 8),
('DEB020', '1a', 8),
('DEB020', '2a', 8),
('DEB020', '3a', 8),
('DEB021', '1a', 8),
('DEB022', '1b', 1438),
('DEB023', '1a', 68),
('DEB024', '1b', 528),
('DEB025', '1a', 228),
('DEB025', '2a', 8),
('DEB026', '1b', 38),
('DEB026', '2b', 8),
('DEB027', '1b', 8),
('DEB027', '2b', 1800),
('DEB028', '1a', 388),
('DEB028', '2a', 168),
('DEB028', '3a', 8),
('DEB029', '1b', 88),
('DEB030', '1b', 98),
('DEB030', '2b', 8),
('DEB031', '1a', 8),
('DEB031', '2a', 8),
('DEB031', '3a', 8),
('DEB032', '1b', 688),
('DEB032', '2b', 198),
('DEB032', '3b', 168),
('DEB033', '1b', 8),
('DEB034', '1b', 1008),
('DEB035', '1b', 798),
('DEB998', '1a', 1308),
('DEB999', '1b', 1758),
('DEB999', '2b', 1728),
('DEB999', '3b', 1708);

-- --------------------------------------------------------

--
-- Table structure for table `result`
--

CREATE TABLE IF NOT EXISTS `result` (
  `teamid` varchar(20) NOT NULL,
  `stageid` varchar(5) NOT NULL,
  `questionid` int(11) NOT NULL,
  `status` int(11) NOT NULL,
  `time` int(11) NOT NULL,
  `changes` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `result`
--

INSERT INTO `result` (`teamid`, `stageid`, `questionid`, `status`, `time`, `changes`) VALUES
('DEB002', '3b', 1, 0, 0, NULL),
('DEB002', '3b', 4, 0, 0, NULL),
('DEB003', '3b', 4, 0, 0, NULL),
('DEB010', '3b', 1, 1, 0, 2),
('DEB010', '3b', 3, 0, 0, NULL),
('DEB010', '3b', 4, 1, 0, 6),
('DEB015', '3b', 1, 0, 0, NULL),
('DEB015', '3b', 3, 0, 0, NULL),
('DEB032', '3b', 1, 0, 0, NULL),
('DEB032', '3b', 3, 1, 0, 11),
('DEB999', '3b', 3, 0, 0, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `stages`
--

CREATE TABLE IF NOT EXISTS `stages` (
  `stageid` varchar(2) NOT NULL,
  `type` varchar(10) NOT NULL,
  `time` int(6) NOT NULL,
  `stageStart` int(2) NOT NULL DEFAULT '0',
  PRIMARY KEY (`stageid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `stages`
--

INSERT INTO `stages` (`stageid`, `type`, `time`, `stageStart`) VALUES
('1a', 'syntax', 30, 1),
('1b', 'syntax', 30, 1),
('2a', 'logical', 30, 1),
('2b', 'logical', 30, 1),
('3a', 'obfuscated', 30, 1),
('3b', 'obfuscated', 30, 1);

-- --------------------------------------------------------

--
-- Table structure for table `teams`
--

CREATE TABLE IF NOT EXISTS `teams` (
  `teamid` varchar(7) NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '0',
  `stage` varchar(3) NOT NULL DEFAULT '0',
  `language` int(11) NOT NULL DEFAULT '0',
  `password` tinytext NOT NULL,
  PRIMARY KEY (`teamid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `teams`
--

INSERT INTO `teams` (`teamid`, `status`, `stage`, `language`, `password`) VALUES
('DEB001', 1, '3b', 2, 'DEB001'),
('DEB002', 3, '3b', 2, 'DEB002'),
('DEB003', 3, '3b', 2, 'DEB003'),
('DEB004', 1, '2b', 2, 'DEB004'),
('DEB005', 3, '3a', 1, 'DEB005'),
('DEB006', 1, '3a', 1, 'DEB006'),
('DEB007', 1, '3a', 1, 'DEB007'),
('DEB008', 1, '3b', 2, 'DEB008'),
('DEB009', 1, '2b', 2, 'DEB009'),
('DEB010', 3, '3b', 2, 'DEB010'),
('DEB011', 3, '3a', 1, 'DEB011'),
('DEB012', 3, '3a', 1, 'DEB012'),
('DEB013', 1, '2a', 1, 'DEB013'),
('DEB014', 1, '2b', 2, 'DEB014'),
('DEB015', 3, '3b', 2, 'DEB015'),
('DEB016', 1, '2a', 1, 'DEB016'),
('DEB017', 1, '2b', 2, 'DEB017'),
('DEB018', 3, '3a', 1, 'DEB018'),
('DEB019', 1, '3b', 2, 'DEB019'),
('DEB020', 3, '3a', 1, 'DEB020'),
('DEB021', 1, '2a', 1, 'DEB021'),
('DEB022', 1, '2b', 2, 'DEB022'),
('DEB023', 1, '2a', 1, 'DEB023'),
('DEB024', 1, '2b', 2, 'DEB024'),
('DEB025', 1, '3a', 1, 'DEB025'),
('DEB026', 1, '3b', 2, 'DEB026'),
('DEB027', 1, '2b', 2, 'DEB027'),
('DEB028', 3, '3a', 1, 'DEB028'),
('DEB029', 1, '2b', 2, 'DEB029'),
('DEB030', 1, '3b', 2, 'DEB030'),
('DEB031', 3, '3a', 1, 'DEB031'),
('DEB032', 3, '3b', 2, 'DEB032'),
('DEB033', 1, '2b', 2, 'DEB033'),
('DEB034', 1, '2b', 2, 'DEB034'),
('DEB035', 1, '2b', 2, 'DEB035'),
('DEB998', 2, '1a', 1, 'DEB998'),
('DEB999', 3, '3b', 2, 'DEB999');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
